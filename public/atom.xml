<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Socks Off and Code.]]></title>
  <link href="http://blog.connoratherton.com/atom.xml" rel="self"/>
  <link href="http://blog.connoratherton.com/"/>
  <updated>2013-11-28T11:33:16+00:00</updated>
  <id>http://blog.connoratherton.com/</id>
  <author>
    <name><![CDATA[Connor Atherton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moodlerooms Aston Conference]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/28/moodlerooms-aston-conference/"/>
    <updated>2013-11-28T11:32:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/28/moodlerooms-aston-conference</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Useful JavaScript Tricks]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/21/obscure-yet-useful-javascript/"/>
    <updated>2013-11-21T17:39:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/21/obscure-yet-useful-javascript</id>
    <content type="html"><![CDATA[<p>JavaScript is a language well known for it&rsquo;s little hacks and tricks that help get things done on a project. In some cases they can turn ugly if statements into elegant one liners but in others they can just be overkill. It all comes down to a trade off between elegance and code readability.</p>

<p>In this post I want to show you three common little tricks used by JS hackers.</p>

<h1>Short Circuiting</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">robot</span> <span class="o">&amp;&amp;</span> <span class="nx">robot</span><span class="p">.</span><span class="nx">fight</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is often referred to as &ldquo;short circuiting&rdquo; a logical operator. Think of it as a ternary operator but with no else condition. The first part is evaluated, in this case it&rsquo;s <code>robot</code>, if it&rsquo;s a <code>truthy</code> value the second part is then evaluated. This works because the logical <code>&amp;&amp;</code> operator needs both of its operands to evaluate to a <code>truthy</code> value, if the first one isn&rsquo;t then it doesn&rsquo;t even have to evaluate the second one to know the whole expression will evaluate to <code>false</code></p>

<p>This could also be written like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">robot</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">fight</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Double Tilde</h1>

<p>The double tilde if often used with floats like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">~~</span><span class="mf">3.14</span> <span class="c1">// outputs: 3</span>
</span><span class='line'><span class="o">~~</span><span class="mf">1.6</span> <span class="c1">// outputs: 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait a minute, that looks familiar, doesn&rsquo;t JS have another function that does that? Try running Math.floor() passing in the same values as above and see what happens, the same values are returned. It is a little obscure and in most cases Math.floor() is probably the better choice but <code>~~</code> does come with some <a href="http://jsperf.com/tilde-vs-floor">performance benefits</a>.</p>

<h1>Boolean Casting</h1>

<p>Values in JavaScript can be two different types, <code>truthy</code> or <code>falsy</code>, and it gets quite complicated to know what a value actually evaluates too (<a href="http://www.sitepoint.com/javascript-truthy-falsy/">see here</a>). However, by places <code>!!</code> before an expression we can find out if it evaluates to true or false based on this rule. <em>If <code>!!expression</code> is <code>truthy</code> it evalutes to true and false otherwise.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Remember every string except an empty string in JS is truthy</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&quot;string&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">string</span> <span class="o">===</span> <span class="kc">true</span> <span class="c1">// false</span>
</span><span class='line'><span class="o">!!</span><span class="nx">string</span> <span class="o">===</span> <span class="kc">true</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// also this is also equal</span>
</span><span class='line'><span class="nb">Boolean</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="o">===</span> <span class="o">!!</span><span class="nx">string</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first <code>!</code> here coerces the value to an inverted boolean value and the second <code>!</code> then converts that back so we get returned a boolean representation of our original expression.</p>

<p>Both <code>!!</code> and <code>~~</code> are not themselves operators, they are just the <code>!</code> and <code>~</code> used twice on the same expression.</p>

<p>I find these help a lot when trying to understand libraries or plugins written in JavaScript and this list isn&rsquo;t by any means finished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A dream come true]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/11/world-cup-tickets/"/>
    <updated>2013-11-11T17:25:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/11/world-cup-tickets</id>
    <content type="html"><![CDATA[<p><strong>I&rsquo;M GOING TO THE WORLD CUP!!</strong></p>

<p>It&rsquo;s been nearly a year in the planning but we&rsquo;ve finally got everything in place for our trip to Rio next summer. We&rsquo;ve booked flights and an apartment overlooking the beautiful Copacabana and right now we&rsquo;re just playing a waiting game until next summer.</p>

<p>When I say we, I&rsquo;m talking about two of friends from my Computer Science course at uni. The funny thing is that we weren&rsquo;t always friends, in fact I don&rsquo;t think I&rsquo;m stretching to say that we probably didn&rsquo;t even know each other existed the first year. I know, it does seem a little crazy us all going on this trip together but let me explain how we all met first.</p>

<p>During first year at university I felt like <code>that math guy</code>. I&rsquo;d always been that guy since I was a little kid. Everybody else gave me that tag and so I guess I just always thought I would study a math degree and enjoy it. Not so. I just didn&rsquo;t seem enjoy maths except from maybe Matrix Algebra, that was cool, but apart from that it just didn&rsquo;t interest me anymore. It wasn&rsquo;t that it didn&rsquo;t challenge me because it did, I just knew I wanted to build stuff!</p>

<p>So in my second year I took more CS classes alongside some pure math modules (I <strong>despise</strong> statistics) and this turned out to be a great decision for a number of reasons.</p>

<ul>
<li>I started to actually build stuff</li>
<li>I enjoyed it a lot more</li>
<li>I was surrounded by people who also wanted to build stuff</li>
<li>I met Matt and Sam, the two guys I&rsquo;m going to Brazil with</li>
</ul>


<p>So I think it was around November 2012 when the idea of going to Brazil started swirling around the computer labs. At the start of the year I was put in a group with Matt to build an Android application and Sam was already good friends with Matt so that&rsquo;s how we all met. The previous month I&rsquo;d just been offered a contract for the academic year to work at the university so I knew that if I saved up enough money from that job I could probably afford it.</p>

<p>Anyway, we kept discussing the idea for a few weeks and eventually we all agreed we were going to do it. It turned out to be a pretty easy decision for all three of us, we bonded over the idea and it does help that all three of us love football. So there we were, 19 months from the start of the World cup and we had made up our minds, whatever it took we were getting there.</p>

<p>It still hadn&rsquo;t sunk in. I&rsquo;ve loved football for as long as I can remember so traveling to Brazil, the home of football, for a World Cup at 20 years of age is an absolute dream.</p>

<p>I think it&rsquo;s one of those things where a lot of people if they were asked would say they would love to go but there&rsquo;s always a reason not too. One of the biggest being that it&rsquo;s just too expensive and I agree, it is pretty expensive. So far we&rsquo;ve spent around £3000 and that doesn&rsquo;t include spending money etc. So how did three university students come up with that kind of money?</p>

<p>Well we all decided to find summer jobs as soon as possible. I didn&rsquo;t go home over summer, I stayed to work at the university giving staff online software support. Matt worked a job in a factory and I can&rsquo;t  remember exactly off the top of my head what Sam did but he did work, I know that.</p>

<p>Then I found another job as a network assistant helping the university networking team and on top of that I found some client work building a custom Wordpress site. Fair to say we were all pretty busy during Summer 2013.</p>

<p>It was all worth it though. By the time term started again in October we already had flights and a place to stay, we just needed tickets to some of the games and for that each of us had £1300 saved. During the first phase of FIFA releasing the tickets we managed to buy three group game tickets.</p>

<p>Mission Accomplished, we&rsquo;re going to watch some football from inside the stadiums at the World Cup, not many people can say that.</p>

<p>I guess what I&rsquo;ve been trying to write about in this post is the story of how three strangers came together, bonded over a shared dream and worked damn hard to make that dream become reality. Proof that stories like this don&rsquo;t just happen in films.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a function to queue animations]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations/"/>
    <updated>2013-11-09T21:09:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to build a presentation today and I&rsquo;m at <em>that</em> stage where I just want to build everything in a browser. It really doesn&rsquo;t matter to me that a task might be ten times harder and take twice as long to implement in a browser, it&rsquo;s the challenge I enjoy. The fact is that I feel more comfortable in Chrome than I ever have in PowerPoint or Word or something like that, plus doing something I&rsquo;ve never done before introduces me to new programming concepts that I otherwise wouldn&rsquo;t have discovered for a while.</p>

<p>Anyway, that&rsquo;s the back story to this post and I apologise for the little ramble there, I&rsquo;m told I just do that sometimes. So what I wanted to build was a function that would step through a series of animations and execute them depending on the time the whole animation process started. Are you with me?</p>

<h2>.animate()</h2>

<p>I know what your thinking <em>&lsquo;Connor just use jQuery&rsquo;s animate method&rsquo;</em> and that would be a sensible statement. After all, we can queue different effects by taking advantage of chaining and jQuery&rsquo;s delay method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$names</span><span class="p">.</span><span class="nx">fadeIn</span><span class="p">(</span><span class="mi">300</span><span class="p">).</span><span class="nx">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The above code works as expected, it fades in some element references by <code>$names</code> then it waits for half a seconds and fades it back out again. That was easy. The problem with this approach is that it&rsquo;s too focused around the one element the animation sequence starts from. What if I then want to trigger some custom event right at the bottom of the page? Sure, I could use chaining again to traverse the DOM to find that element but that takes a lot of effort and quickly we&rsquo;ll notice our code becoming extremely brittle even for 2 or maybe 3 animations. No this won&rsquo;t do, we need a new approach. Bring on <code>setInterval()</code>..</p>

<h2>setInterval()</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> is one of the three JavaScript timers and is the one you should use if you want an action to happen repeatedly. So after a few attempts I finally have a simple yet effective animate method working correctly. Here it is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">duration</span> <span class="o">=</span> <span class="mi">60000</span><span class="p">,</span> <span class="c1">// animation has to last 60 seconds </span>
</span><span class='line'>      <span class="nx">interval</span><span class="p">,</span> <span class="c1">// our interval id </span>
</span><span class='line'>      <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//  </span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// get how many seconds are left then invert it </span>
</span><span class='line'>    <span class="c1">// to calculate the current time since the animation started  </span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">elapsed</span> <span class="o">=</span> <span class="nx">duration</span> <span class="o">-</span> <span class="p">(</span><span class="nx">duration</span> <span class="o">-</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// do something at... </span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">elapsed</span> <span class="o">===</span> <span class="mi">5000</span><span class="p">)</span> <span class="c1">// ...5 seconds </span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">elapsed</span> <span class="o">===</span> <span class="mi">10000</span><span class="p">)</span> <span class="c1">// ...10 seconds </span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">elapsed</span> <span class="o">===</span> <span class="mi">50000</span><span class="p">)</span> <span class="c1">// ...50 seconds </span>
</span><span class='line'>        <span class="c1">// could also use </span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">counter</span> <span class="o">===</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// ...5 seconds </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if we are are at the end then stop animating </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">elapsed</span> <span class="o">===</span> <span class="nx">duration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">interval</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// animate every second </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using this function I was able to build a presentation full of complex animations and effects with ease. I know there are other mature plugins out there that do this kind of thing such as impress.js but by building it myself I just understand it more. Plus I find it very rewarding to build things like this.</p>

<p>So that&rsquo;s it for this post. I&rsquo;m not done playing with timing functions just yet though, I really want to try and build some animating particle system using <code>requestAnimationFrame</code> but that&rsquo;s for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing OctoPanel]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/03/introducing-octopanel/"/>
    <updated>2013-11-03T14:18:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/03/introducing-octopanel</id>
    <content type="html"><![CDATA[<p>This project all started when I stumbled across OctoPress, a blogging framework for Jekyll that describes itself as <strong>a blogging framework for hackers</strong>. That sounds good doesn&rsquo;t it? I&rsquo;ve created blog themes in the past but only for Wordpress and although I think it is an amazing piece of software it just didn&rsquo;t work for me.</p>

<p>I&rsquo;m a coding nerd. I prefer to be in my favourite text editor (sublime text) typing away blog posts than in the browser, it&rsquo;s just how I like to work. So I basically fell in love with the idea of using OctoPress because it gave me the chance to</p>

<ul>
<li>Really get to grips with markdown syntax</li>
<li>Dig into to some ruby code (I want to learn ruby)</li>
<li>Create an awesome blog theme!</li>
</ul>


<p>This theme is based on the <strong><a href="http://medium.com">Medium</a></strong> layout and I&rsquo;ve tried to keep it super simple so it has support for gravatar images, twitter sharing and disqus comments.</p>

<p>It&rsquo;s also possible to give the left panel a background-image instead of just a plain color as I have for this site.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="k">@if</span> <span class="nv">$image</span> <span class="o">==</span> <span class="n-Pseudo">true</span> <span class="err">{</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nv">$left-background-image</span> <span class="nv">!important</span><span class="err">;</span>
</span><span class='line'>  <span class="na">border-right</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$base02</span><span class="o">,</span> <span class="mi">5</span><span class="p">)</span> <span class="nv">!important</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span> <span class="o">@</span><span class="nt">else</span> <span class="err">{</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="nv">$left-background-color</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve released the theme on <a href="https://github.com/ConnorAtherton/OctoPanel">Github</a> so if you have time please contribute and if you use the theme on your site then please add it to the <a href="https://github.com/ConnorAtherton/OctoPanel/wiki/All-sites-using-this-theme">OctoPanel wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring CSS Syntax]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/02/exploring-css-syntax/"/>
    <updated>2013-11-02T13:53:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/02/exploring-css-syntax</id>
    <content type="html"><![CDATA[<p>Over the past few months I&rsquo;ve been writing a lot of SASS and I&rsquo;ve noticed there&rsquo;s a few different ways to write styles, some better than others. In this post we&rsquo;ll see three of the most popular and then you can decide which one you like best.</p>

<p>All the examples I&rsquo;ll use here are SASS because that&rsquo;s what I&rsquo;ve been using recently. For those of you who haven&rsquo;t used SASS, it&rsquo;s like CSS on steroids, like really high end super expensive steroids. It actualy makes writing maintainable CSS fun.</p>

<p>I should also mention there is LESS, an alternative to SASS that is also highly regarded in web circles. I haven&rsquo;t used it yet so I can&rsquo;t really comment on how good it is but from what I&rsquo;ve read it&rsquo;s also pretty sweet.</p>

<h2>An imaginative story to set the scene</h2>

<p>Right, down to business. Writing CSS isn&rsquo;t so bad, it&rsquo;s okay as long as it&rsquo;s properly formatted. Imagine the scenario. Your searching on GitHub and you come across a really interesting project, you do what any open source ninja would do and go right ahead and fork away. You browse the open issues and come across a simple one labeled <em>noob</em>, exactly what you want.</p>

<p>All that&rsquo;s required is to modify a few styles in a few different places, sounds easy, almost too easy. So you look in the styles directory and see there is like 50 partials. Not a bad start. You open the file you need, say <code>_modals.scss</code> and <strong>HOLY MOTHER OF TABLE LAYOUTS! WHAT IS THIS</strong>. Upon looking at this unweildy set of horrific style declarations you make the very easy decision to scrap this whole plan. You delete your forked repo on GitHub and pretend none of this ever happened.</p>

<p>Okay, so maybe that example was a little over dramatic (<em>just a little</em>) but I think it made the point that if you want to work in a team on a project then you need to learn how to format styles properly so they are readable and maintainable.</p>

<h2>The good &lsquo;ol multi-line format</h2>

<p>This is the most popular format for SASS and it&rsquo;s a selector followed by a brace with style declarations starting on the next line and the closing brace on it&rsquo;s own line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="nc">.separator</span> <span class="err">{</span>
</span><span class='line'>  <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;\2022 &quot;</span><span class="err">;</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span> <span class="mf">.4</span><span class="kt">em</span> <span class="mi">0</span> <span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>  <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is taken from the theme this very blog is using and one thing to notice is that there is always a space between the selector expression and the opening brace. This isn&rsquo;t enforced by syntax it&rsquo;s just convention. For those of you who do any serious programming this style will seem familiar to you, it&rsquo;s conventional for control statements to be written this way, it&rsquo;s often referred to as the K&amp;R style.</p>

<h2>The hanging brace</h2>

<p>This one isn&rsquo;t as popular as the format above but you will see it around sometime. This kind of formatting is very popular with <code>PHP</code> programming. Mainly because it gives the code a <strong>&lsquo;grouping&rsquo;</strong> feel to it. I feel like SASS is more readable using this method.</p>

<p>Here is the same code as above but in the new style.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="nc">.separator</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'>  <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;\2022 &quot;</span><span class="err">;</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">0</span> <span class="mf">.4</span><span class="kt">em</span> <span class="mi">0</span> <span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>  <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay so we haven&rsquo;t done much here so let&rsquo;s take a better example. What you see below is more complicated and looks pretty cluttered. Look what happens when we change to hanging braces.</p>

<figure class='code'><figcaption><span>Opening brace on same line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="nn">#blog-archives</span> <span class="err">{</span>
</span><span class='line'>  <span class="nt">article</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">position</span><span class="o">:</span> <span class="no">relative</span><span class="err">;</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:last-child</span> <span class="err">{</span>
</span><span class='line'>      <span class="na">background</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nt">h1</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="nt">a</span> <span class="err">{</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> hover-link</span><span class="err">;</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="no">inherit</span><span class="err">;</span>
</span><span class='line'>      <span class="na">&amp;</span><span class="o">:</span><span class="n">hover</span> <span class="err">{</span> <span class="no">color</span><span class="o">:</span> <span class="nv">$link-color-hover</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'>      <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="err">;</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nt">a</span><span class="nc">.category</span><span class="o">,</span> <span class="nt">time</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">@extend</span> <span class="nc">.sans</span><span class="o">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="err">;</span>
</span><span class='line'>  <span class="nt">time</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mf">.9</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">.month,</span><span class="err"> </span><span class="na">.day</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'>    <span class="na">.month</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="na">p</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="err">;</span> <span class="no">color</span><span class="o">:</span> <span class="nv">$link-color-hover</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Opening brace on next line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="nn">#blog-archives</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'>  <span class="nt">article</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span> <span class="mi">0</span> <span class="mi">1</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">position</span><span class="o">:</span> <span class="no">relative</span><span class="err">;</span>
</span><span class='line'>    <span class="k">&amp;</span><span class="nd">:last-child</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="na">background</span><span class="o">:</span> <span class="no">none</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nt">h1</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="nt">a</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> hover-link</span><span class="err">;</span>
</span><span class='line'>      <span class="na">color</span><span class="o">:</span> <span class="no">inherit</span><span class="err">;</span>
</span><span class='line'>      <span class="na">&amp;</span><span class="o">:</span><span class="n">hover</span> <span class="err">{</span> <span class="no">color</span><span class="o">:</span> <span class="nv">$link-color-hover</span><span class="err">;</span> <span class="err">}</span>
</span><span class='line'>      <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="err">;</span>
</span><span class='line'>      <span class="na">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nt">a</span><span class="nc">.category</span><span class="o">,</span> <span class="nt">time</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="k">@extend</span> <span class="nc">.sans</span><span class="o">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="na">color</span><span class="o">:</span> <span class="nv">$text-color-light</span><span class="err">;</span>
</span><span class='line'>  <span class="nt">time</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="na">font-size</span><span class="o">:</span> <span class="mf">.9</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.2</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="nc">.month</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="err">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>  <span class="nt">p</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span><span class="err">;</span>
</span><span class='line'>    <span class="na">color</span><span class="o">:</span> <span class="nv">$link-color-hover</span><span class="err">;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Placing the brace on the next line makes it easy to see what pair of braces match but SASS just doesn&rsquo;t look as elegant formatted this way. I can&rsquo;t quite put my finger on what makes me slightly dislike this method for SASS, maybe it&rsquo;s because it makes nesting (<em>one of the best features</em>) look a bit awkward.</p>

<h2>The one liner</h2>

<p>This one is less common than the other two but I have seen it around. There was a really good blog post I read where the author argues in favour of this approach but for the life of me I can&rsquo;t remember where I read it. If I find it I&rsquo;ll put it at the bottom of this post.</p>

<p>This format requires that your two braces be on the same line with all style rules in between like this;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="na">.separator</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">content</span><span class="o">:</span> <span class="s2">&quot;\2022 &quot;</span><span class="err">;</span> <span class="no">padding</span><span class="o">:</span> <span class="mi">0</span> <span class="mf">.4</span><span class="kt">em</span> <span class="mi">0</span> <span class="mf">.2</span><span class="kt">em</span><span class="err">;</span> <span class="no">display</span><span class="o">:</span> <span class="no">inline</span><span class="o">-</span><span class="no">block</span><span class="err">;</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the spacing between the different rules. However, even with the spacing this is so much harder to read and here we are using three rules. Imagine if there were 9 or 10! I dread to think how unreadable that would be. However, on the plus side it keeps the file nice and concise.</p>

<p>My advice would be to use this format only if there is only one or two rules because then it is actually eadier to read as one line. Any more than two then it&rsquo;s best to use one of the first two.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'><span class="c1">// this..</span>
</span><span class='line'><span class="nc">.month</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'>  <span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..is more readable like this</span>
</span><span class='line'><span class="na">.month</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">text-transform</span><span class="o">:</span> <span class="no">uppercase</span><span class="err">;</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ultimately, you just <strong>need to be consistent</strong>. If you start writing a style sheet using the first method don&rsquo;t suddenly switch to the second method. That&rsquo;s a big no no, you&rsquo;ll get no stickers if you do that and you&rsquo;ll just confuse people and we don&rsquo;t want to do that now do we.</p>
]]></content>
  </entry>
  
</feed>
