<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | Socks Off and Code.]]></title>
  <link href="http://blog.connoratherton.com/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://blog.connoratherton.com/"/>
  <updated>2013-12-27T16:03:29+00:00</updated>
  <id>http://blog.connoratherton.com/</id>
  <author>
    <name><![CDATA[Connor Atherton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang Mergesort Algorithm]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/30/erlang-mergesort-algorithm/"/>
    <updated>2013-11-30T21:36:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/30/erlang-mergesort-algorithm</id>
    <content type="html"><![CDATA[<p>During the past two weeks I&rsquo;ve been introduced to Erlang, a functional programming language. I&rsquo;ve only ever briefly used functional programming and that was in Scheme
a few months back and I didn&rsquo;t really enjoy that. Probably because it seemed a bit foreign to me ,being mainly a web developer, for nearly everything to be implemented using recursion!</p>

<p>It wasn&rsquo;t that I didn&rsquo;t think Scheme was a good language, I was just so used to programming in an imperative style that it took me quite a while
to adjust to a functional way of thinking. I mean I take for granted every day the fact that it&rsquo;s possible to assign new values to variables but you
can&rsquo;t do that in Scheme or Erlang or any other functional language. It&rsquo;s fair to say that it takes some getting used too.</p>

<p>So in one of my assignments I was told to create a merge short algorithm and below is what I came up with. My solution is tail recursive
and I&rsquo;ve tested it with all the cases I could think of so I&rsquo;m pretty sure it does work.</p>

<p>``` erlang Erlang Merge Sort
-module(mergesort).
-export([mergesort/2]).</p>

<p>% CALLS TO WRAPPER FUNCTION</p>

<p>% mergesort used when there is actually only one list passed.
% Splits into two lists and calls general mergesort .
mergesort(List) &ndash;></p>

<pre><code>% I used this before I realised I could
% just use lists:sort() to return the list
% Splitpoint = length(List) div 2,
% {Left, Right} = lists:split(Splitpoint, List),
% mergesort(Left, Right).
lists:sort(List).
</code></pre>

<p>% Merge sorting two empty list is just an empty list
mergesort([], []) &ndash;> [];</p>

<p>% Merge with only one list
% Split list into two and call merge
mergesort(Left, []) &ndash;></p>

<pre><code>mergesort(Left);
</code></pre>

<p>mergesort([], Right) &ndash;></p>

<pre><code>mergesort(Right);
</code></pre>

<p>% merge sort with two full lists
% before merging sort the lists into
% ascending order
mergesort(Left, Right) &ndash;></p>

<pre><code>Sortedleft = lists:sort(Left),
Sortedright = lists:sort(Right),
merge(Sortedleft, Sortedright, []).
</code></pre>

<p>% ACTUAL WRAPPER FUNCTION</p>

<p>% terminating case when all elements have been sorted
merge([], [], List) &ndash;> lists:reverse(List);</p>

<p>% No Right list left
merge([L|Left], [], List) &ndash;></p>

<pre><code>merge(Left, [], [L|List]);
</code></pre>

<p>% No Left list left
merge([], [R|Right], List) &ndash;></p>

<pre><code>merge([], Right, [R|List]);
</code></pre>

<p>% General recursive case 1
% if the Right head is less than the left
% add it to our sorted list and remove it
% from the original list
merge([L|Left], [R|Right], List) when R &lt; L &ndash;></p>

<pre><code>merge([L|Left], Right, [R|List]);
</code></pre>

<p>% General recursive case 2
% If we are in this case then the
% right head isn&rsquo;t less than and no guard
% is required because we know we can just
% add it to the list
merge([L|Left], Right, List) &ndash;></p>

<pre><code>merge(Left, Right, [L|List]).
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
