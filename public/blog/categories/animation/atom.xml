<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: animation | Socks Off and Code.]]></title>
  <link href="http://blog.connoratherton.com/blog/categories/animation/atom.xml" rel="self"/>
  <link href="http://blog.connoratherton.com/"/>
  <updated>2013-11-09T22:07:00+00:00</updated>
  <id>http://blog.connoratherton.com/</id>
  <author>
    <name><![CDATA[Connor Atherton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a function to queue animations]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations/"/>
    <updated>2013-11-09T21:09:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to build a presentation today and I&rsquo;m at <em>that</em> stage where I just want to build everything in a browser. It really doesn&rsquo;t matter to me that a task might be ten times harder and take twice as long to implement in a browser, it&rsquo;s the challenge I enjoy. The fact is that I feel more comfortable in Chrome than I ever have in PowerPoint or Word or something like that, plus doing something I&rsquo;ve never done before introduces me to new programming concepts that I otherwise wouldn&rsquo;t have discovered for a while.</p>

<p>Anyway, that&rsquo;s the back story to this post and I apologise for the little ramble there, I&rsquo;m told I just do that sometimes. So what I wanted to build was a function that would step through a series of animations and execute them depending on the time the whole animation process started. Are you with me?</p>

<h2>.animate()</h2>

<p>I know what your thinking <em>&lsquo;Connor just use jQuery&rsquo;s animate method&rsquo;</em> and that would be a sensible statement. After all, we can queue different effects by taking advantage of chaining and jQuery&rsquo;s delay method.</p>

<p><code>javascript
$names.fadeIn(300).delay(500).fadeOut(300)
</code></p>

<p>The above code works as expected, it fades in some element references by <code>$names</code> then it waits for half a seconds and fades it back out again. That was easy. The problem with this approach is that it&rsquo;s too focused around the one element the animation sequence starts from. What if I then want to trigger some custom event right at the bottom of the page? Sure, I could use chaining again to traverse the DOM to find that element but that takes a lot of effort and quickly we&rsquo;ll notice our code becoming extremely brittle even for 2 or maybe 3 animations. No this won&rsquo;t do, we need a new approach. Bring on <code>setInterval()</code>..</p>

<h2>setInterval()</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> is one of the three JavaScript timers and is the one you should use if you want an action to happen repeatedly. So after a few attempts I finally have a simple yet effective animate method working correctly. Here it is.</p>

<p>``` javascript
var animate = function() {
  var duration = 60000, // animation has to last 60 seconds</p>

<pre><code>  interval, // our interval id 
  counter = 0; //  
</code></pre>

<p>  interval = setInterval(function() {</p>

<pre><code>// get how many seconds are left then invert it 
// to calculate the current time since the animation started  
var elapsed = duration - (duration - (counter * 1000)); 

    // do something at... 
if(elapsed === 5000) // ...5 seconds 
if(elapsed === 10000) // ...10 seconds 
if(elapsed === 50000) // ...50 seconds 
    // could also use 
    if(counter === 5) // ...5 seconds 

// if we are are at the end then stop animating 
if (elapsed === duration) { 
  clearInterval(interval); 
} 

counter++; 
</code></pre>

<p>  }, 1000); // animate every second
}
```</p>

<p>Using this function I was able to build a presentation full of complex animations and effects with ease. I know there are other mature plugins out there that do this kind of thing such as impress.js but by building it myself I just understand it more. Plus I find it very rewarding to build things like this.</p>

<p>So that&rsquo;s it for this post. I&rsquo;m not done playing with timing functions just yet though, I really want to try and build some animating particle system using <code>requestAnimationFrame</code> but that&rsquo;s for another post.</p>
]]></content>
  </entry>
  
</feed>
