<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Socks Off and Code.]]></title>
  <link href="http://blog.connoratherton.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.connoratherton.com/"/>
  <updated>2013-12-30T18:16:24+00:00</updated>
  <id>http://blog.connoratherton.com/</id>
  <author>
    <name><![CDATA[Connor Atherton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 Useful JavaScript Tricks]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/21/3-Useful-JavaScript-Tricks/"/>
    <updated>2013-11-21T17:39:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/21/3-Useful-JavaScript-Tricks</id>
    <content type="html"><![CDATA[<p>JavaScript is a language well known for it&rsquo;s little hacks and tricks that help get things done on a project. In some cases they can turn ugly if statements into elegant one liners but in others they can just be overkill. It all comes down to a trade off between elegance and code readability.</p>

<p>In this post I want to show you three common little tricks used by JS hackers.</p>

<h1>Short Circuiting</h1>

<p><code>javascript
robot &amp;&amp; robot.fight()
</code></p>

<p>This is often referred to as &ldquo;short circuiting&rdquo; a logical operator. Think of it as a ternary operator but with no else condition. The first part is evaluated, in this case it&rsquo;s <code>robot</code>, if it&rsquo;s a <code>truthy</code> value the second part is then evaluated. This works because the logical <code>&amp;&amp;</code> operator needs both of its operands to evaluate to a <code>truthy</code> value, if the first one isn&rsquo;t then it doesn&rsquo;t even have to evaluate the second one to know the whole expression will evaluate to <code>false</code></p>

<p>This could also be written like this.</p>

<p>``` javascript
if (robot) {</p>

<pre><code>robot.fight();
</code></pre>

<p>}
```</p>

<h1>Double Tilde</h1>

<p>The double tilde if often used with floats like this.</p>

<p><code>javascript
~~3.14 // outputs: 3
~~1.6 // outputs: 1
</code></p>

<p>Wait a minute, that looks familiar, doesn&rsquo;t JS have another function that does that? Try running Math.floor() passing in the same values as above and see what happens, the same values are returned. It is a little obscure and in most cases Math.floor() is probably the better choice but <code>~~</code> does come with some <a href="http://jsperf.com/tilde-vs-floor">performance benefits</a>.</p>

<h1>Boolean Casting</h1>

<p>Values in JavaScript can be two different types, <code>truthy</code> or <code>falsy</code>, and it gets quite complicated to know what a value actually evaluates too (<a href="http://www.sitepoint.com/javascript-truthy-falsy/">see here</a>). However, by places <code>!!</code> before an expression we can find out if it evaluates to true or false based on this rule. <em>If <code>!!expression</code> is <code>truthy</code> it evalutes to true and false otherwise.</em></p>

<p>``` javascript
// Remember every string except an empty string in JS is truthy
var string = &ldquo;string&rdquo;;</p>

<p>string === true // false
!!string === true // true</p>

<p>// also this is also equal
Boolean(string) === !!string
```</p>

<p>The first <code>!</code> here coerces the value to an inverted boolean value and the second <code>!</code> then converts that back so we get returned a boolean representation of our original expression.</p>

<p>Both <code>!!</code> and <code>~~</code> are not themselves operators, they are just the <code>!</code> and <code>~</code> used twice on the same expression.</p>

<p>I find these help a lot when trying to understand libraries or plugins written in JavaScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a function to queue animations]]></title>
    <link href="http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations/"/>
    <updated>2013-11-09T21:09:00+00:00</updated>
    <id>http://blog.connoratherton.com/blog/2013/11/09/creating-a-function-to-queue-animations</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to build a presentation today and I&rsquo;m at <em>that</em> stage where I just want to build everything in a browser. It really doesn&rsquo;t matter to me that a task might be ten times harder and take twice as long to implement in a browser, it&rsquo;s the challenge I enjoy. The fact is that I feel more comfortable in Chrome than I ever have in PowerPoint or Word or something like that, plus doing something I&rsquo;ve never done before introduces me to new programming concepts that I otherwise wouldn&rsquo;t have discovered for a while.</p>

<p>Anyway, that&rsquo;s the back story to this post and I apologise for the little ramble there, I&rsquo;m told I just do that sometimes. So what I wanted to build was a function that would step through a series of animations and execute them depending on the time the whole animation process started. Are you with me?</p>

<h2>.animate()</h2>

<p>I know what your thinking <em>&lsquo;Connor just use jQuery&rsquo;s animate method&rsquo;</em> and that would be a sensible statement. After all, we can queue different effects by taking advantage of chaining and jQuery&rsquo;s delay method.</p>

<p><code>javascript
$names.fadeIn(300).delay(500).fadeOut(300)
</code></p>

<p>The above code works as expected, it fades in some element references by <code>$names</code> then it waits for half a seconds and fades it back out again. That was easy. The problem with this approach is that it&rsquo;s too focused around the one element the animation sequence starts from. What if I then want to trigger some custom event right at the bottom of the page? Sure, I could use chaining again to traverse the DOM to find that element but that takes a lot of effort and quickly we&rsquo;ll notice our code becoming extremely brittle even for 2 or maybe 3 animations. No this won&rsquo;t do, we need a new approach. Bring on <code>setInterval()</code>..</p>

<h2>setInterval()</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval">setInterval</a> is one of the three JavaScript timers and is the one you should use if you want an action to happen repeatedly. So after a few attempts I finally have a simple yet effective animate method working correctly. Here it is.</p>

<p>``` javascript
var animate = function() {
  var duration = 60000, // animation has to last 60 seconds</p>

<pre><code>  interval, // our interval id 
  counter = 0; //  
</code></pre>

<p>  interval = setInterval(function() {</p>

<pre><code>// get how many seconds are left then invert it 
// to calculate the current time since the animation started  
var elapsed = duration - (duration - (counter * 1000)); 

    // do something at... 
if(elapsed === 5000) // ...5 seconds 
if(elapsed === 10000) // ...10 seconds 
if(elapsed === 50000) // ...50 seconds 
    // could also use 
    if(counter === 5) // ...5 seconds 

// if we are are at the end then stop animating 
if (elapsed === duration) { 
  clearInterval(interval); 
} 

counter++; 
</code></pre>

<p>  }, 1000); // animate every second
}
```</p>

<p>Using this function I was able to build a presentation full of complex animations and effects with ease. I know there are other mature plugins out there that do this kind of thing such as impress.js but by building it myself I just understand it more. Plus I find it very rewarding to build things like this.</p>

<p>So that&rsquo;s it for this post. I&rsquo;m not done playing with timing functions just yet though, I really want to try and build some animating particle system using <code>requestAnimationFrame</code> but that&rsquo;s for another post.</p>
]]></content>
  </entry>
  
</feed>
